"""
	Name:	MARCS_Online_Recognition for online recognizing 
	Algorithm:	
	Description:	
	Hints:	
	Date:	
"""
import os
import sys
import math
import json
import weka.core.jvm as jvm
from tools import read_dataset

"""
----------------------------------------------
	isFamilarPattern
	Description:	Check 
	Input:	
	Output:	-1--> no familar pattern, positive integer --> some familar pattern
	Hints:	
----------------------------------------------
"""

def isFamilarPattern(Distribution):
	#not finished yet.
	return -1

def PrintInstanceWL(instance, WL_filename):
	FILE = open(WL_filename,'a')
	for i in range(len(instance)):
		if (i != 0):
			FILE.write('\t')
		FILE.write(str(instance[i]))

	FILE.write('\n')
	FILE.close()
	return 0

"""
----------------------------------------------
	ActivityRecognition
	Description:	Activity Recognition Part. 
	Hints:	In this part, we will read the instance and use the fliter to get the possibility for instance to models.
			If it's old similar label, output it or try to label it
----------------------------------------------
"""

def ActivityRecognition(AR_filename, WL_filename):
	pass
	#read the file from AR_filename
	AR_instance = read_dataset(AR_filename,'\t')
	is_unfamilar_pattern = -1
	for i in range(len(AR_instance)):
		Distribution = ModelPossibilityDistribution(AR_instance[i])
		is_familar_pattern = isFamilarPattern(Distribution)
		if is_familar_pattern < 0:
			print "Add a new instance into WaitingList..."
			PrintInstanceWL(AR_instance[i],WL_filename)
		else:
			pass
	return 0

"""
----------------------------------------------
	Initialization
	Description:	read the initial model
	Hints:	
----------------------------------------------
"""

def Initialization(filename, Initial_ARFF):
	
	FILE = open(filename,'rU')
	rawdata = FILE.read()
	print rawdata
	decoded = json.loads(rawdata)
	print decoded['Initial_ARFF_filename']
	Initial_ARFF_FILE = open(decoded['Initial_ARFF_filename'],'rU')
	Initial_ARFF = Initial_ARFF_FILE.read()
	Initial_ARFF_FILE.close() 
	FILE.close()
	return decoded['log_filename'], decoded['WL_filename']

Initial_ARFF = []
log_filename, WL_filename = Initialization(sys.argv[1], Initial_ARFF)
print 'log_filename = ',log_filename
print 'WaitingList_filename = ', WL_filename
exit()

while True:
	command = raw_input('\nADD:ADD [ARFF\'s filename]\n AR:AR [raw data of dataset\' filename]\nplease enter the command:')
	print 'command: '+command
	command = command.split(' ')
	if command[0] == 'ADD' or command[0] == 'Add':
		print "MARCS Update Recognition Model...loading..."
		#update the model which is generated by Adaptation Component
		print "MARCS Update Recognition Model...finished."
		pass

	if command[0] == 'AR' or command[0] == 'ar':
		print "MARCS Activity Recognition...loading..."
		ActivityRecognition(command[1], WL_filename)
		print "MARCS Activity Recognition...finished."
		pass
	pass
